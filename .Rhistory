inherits(x, "ses") || stop("'x' must be of class 'ses'.")
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
}
summary(myses)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
str(lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num))
}
summary(myses)
summary(myses$tdr)
class(summary(myses$tdr))
str(summary(myses$tdr))
names(summary(myses$tdr))
a <- summary(myses$tdr)
a
str(a)
attributes(a)
where(x$tdr, is.numeric)
where(myses$tdr, is.numeric)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
class(out) <- "table"
dim(out) <- c(4, sum(where(x$tdr, is.numeric)))
out$dimnames <- list((min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
}
summary(myses)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list((min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
}
summary(myses)
x <-myses
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list((min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list((min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
na.rm=TRUE
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list((min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
class(out) <- "table"
attr(out, which="dim")
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- sapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list((min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
attr(out, which="dimnames") <- list(c(min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
table(x$tdr)
str(table(x$tdr))
str(a)
fun.num <- function(x){
funs <- c(min, mean, median, max)
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- matrix(sapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num), nrow=4)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list(c(min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
out <- matrix(sapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num), nrow=4)
out
sapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
out <- sapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
str(out)
out <- sapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)
str(out)
out <- unlist(apply(x$tdr[ , where(x$tdr, is.numeric)], fun.num))
out <- unlist(lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num))
out
str(    attr(out, which="dim"))
str(out)
out <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)), nrow=4)
str(out)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list(c(min, mean, median, max), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
str(out)
out <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.numeric)], fun.num)), nrow=4)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list(quote(c(min, mean, median, max)), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
quote(c(min, mean, median, max))
as.character(c(min, mean, median, max))
myses$tdr$Dive.id  <-as.integer(myses$tdr$Dive.id )
funs <- c(min, mean, median, max)
funs
substitute(funs)
funs <- c(min, mean, median, max)
substitute(funs)
substitute(c(min, mean, median, max))
deparse(substitute(c(min, mean, median, max)))
deparse(fun)
deparse(funs)
deparse(as.character(fun))
funs <- c(min=min, mean=mean, median=median, max=max)
funs
names(funs)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
funs <- c(min=min, mean=mean, median=median, max=max)
fun.num <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.num)), nrow=4)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
}
summary(myses)
x$tdr$Dive.id <- as.integer(x$tdr$Dive.id)
funs <- c(min=min, mean=mean, median=median, max=max)
fun.num <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.num)), nrow=4)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.numeric)))
attr(out, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.num)), nrow=4)
c(4, sum(where(x$tdr, is.numeric)))
out <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.num)), nrow=4)
str(out)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
funs <- c(min=min, mean=mean, median=median, max=max)
fun.num <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.num)), nrow=4)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.double)))
attr(out, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.numeric)])
print(out)
}
summary(myses)
funs <- c(min=min, mean=mean, median=median, max=max)
fun.num <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.num)), nrow=4)
class(out) <- "table"
attr(out, which="dim") <- c(4, sum(where(x$tdr, is.double)))
out
attr(out, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.double)])
print(out)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x$tdr, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.double)])
if (any(grepl("Dive.id", names(x$tdr)))) {out.dv <- integer(max(x$tdr$Dive.id))}
out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out <- list(nDives=out.dv, Doubles=out.double, Other=out.char)
}
summary(myses)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x$tdr, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.double)])
if (any(grepl("Dive.id", names(x$tdr)))) {out.dv <- integer(max(x$tdr$Dive.id))}
out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out <- list(nDives=out.dv, Doubles=out.double, Other=out.char)
print(out)
}
summary(myses)
max(x$tdr$Dive.id)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x$tdr, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.double)])
if (any(grepl("Dive.id", names(x$tdr)))) {out.dv <- max(x$tdr$Dive.id)}
out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out <- list(nDives=out.dv, Doubles=out.double, Other=out.char)
print(out)
}
summary(myses)
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x$tdr, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.double)])
if (any(grepl("Dive.id", names(x$tdr)))) {out.dv <- max(x$tdr$Dive.id)}
out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out <- list(nDives=out.dv, Time=range(x$tdr$Time), Doubles=out.double, Other=out.char)
print(out)
}
summary(myses)
as.POSIXct
now()
system.time()
date()
as.POSIXct(date())
format(Sys.time(), "%a %b %d %H:%M:%S %Y")
format(Sys.time(), "%Y-%m-%d %H:%M:%S")
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")))
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S"))
t1 <-  as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S"))
t2 <-  as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S"))
diff(t1, t2)
difftime(t1, t2)
difftime(t2, t1, units="sec")
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x$tdr[ , where(x$tdr, is.double)], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x$tdr, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x$tdr)[where(x$tdr, is.double)])
if (any(grepl("Dive.id", names(x$tdr)))) {out.dv <- max(x$tdr$Dive.id)}
out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out <- list(nDives=out.dv, Time=range(x$tdr$Time), Doubles=out.double, Other=out.char,
Reso=difftime(x$tdr$Time[2], x$tdr$Time[1], units="sec"))
print(out)
}
summary(myses)
load_all("../SES")
# S3 method for summary, class ses - tdr and statdives
summary.tdr <- function(x, na.rm=TRUE){
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x[ , where(x, is.double)], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x)[where(x, is.double)])
if (any(grepl("Dive.id", names(x)))) {out.dv <- max(x$Dive.id)}
print(substitute(x))
out <- list(nDives=out.dv, Time=range(x$Time), Doubles=out.double,
Reso=difftime(x$Time[2], x$Time[1], units="sec"))
}
summary.statdives <- function(x, na.rm=TRUE){
}
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
# 	out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out.tdr <- summary(x$tdr)
print(out)
}
summary(myses$tdr)
myses$Time <- seq(t1, t2, length.out=500)
summary(myses$tdr)
t1
View(myses$tdr)
myses$tdr$Time <- seq(t1, t2, length.out=500)
View(myses$tdr)
summary(myses$tdr)
summary(myses)
# S3 method for summary, class ses - tdr and statdives
summary.tdr <- function(x, na.rm=TRUE){
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x[ , where(x, is.double)], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x)[where(x, is.double)])
if (any(grepl("Dive.id", names(x)))) {out.dv <- max(x$Dive.id)}
out <- list(nDives=out.dv, Time=range(x$Time), Doubles=out.double,
Reso=difftime(x$Time[2], x$Time[1], units="sec"))
if (deparse(substitute(x)) != "x$tdr") print(out)
}
summary.statdives <- function(x, na.rm=TRUE){
}
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
# 	out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out.tdr <- summary(x$tdr)
print(out.tdr)
}
summary(myses$tdr)
where(myses$tdr, is.double && !is.POSIXct)
where(myses$tdr, is.double & !is.POSIXct)
where(myses$tdr, is.double)
where(myses$tdr, is.double) & where(x, !is.POSIXct)
where(myses$tdr, is.double) & !where(x, is.POSIXct)
is.numeric.POSIXt
where(myses$tdr, is.double & !is.numeric.POSIXt)
where(myses$tdr, is.double) & !where(x, is.numeric.POSIXct)
where(myses$tdr, is.double) & !where(myses$tdr, is.numeric.POSIXct)
where(myses$tdr, is.double) & !where(myses$tdr, is.numeric.POSIXt)
where(myses$tdr, is.double & !is.numeric.POSIXt)
where(myses$tdr, is.numeric.POSIXt)
where(myses$tdr, is.numeric.Date)
where(myses$tdr, is.numeric.difftime)
str(myses$tdr$Time)
class(myses$tdr$Time)
is.numeric.POSIXt(myses$tdr$Time)
inherits(x=myses$tdr$Time, "POSIXt")
inherits(x=myses$tdr, "POSIXt")
lapply(myses$tdr, inherits, MoreArgs="POSIXt")
lapply(myses$tdr, inherits, arg2="POSIXt")
lapply(myses$tdr, inherits, arg1="POSIXt")
lapply(myses$tdr, inherits, what="POSIXt")
sapply(myses$tdr, inherits, what="POSIXt")
# S3 method for summary, class ses - tdr and statdives
summary.tdr <- function(x, na.rm=TRUE){
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
out.double <- matrix(unlist(lapply(x[ , where(x, is.double) & !sapply(myses$tdr, inherits, what="POSIXt")], fun.double)), nrow=4)
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(where(x, is.double)))
attr(out.double, which="dimnames") <- list(names(funs), names(x)[where(x, is.double)])
if (any(grepl("Dive.id", names(x)))) {out.dv <- max(x$Dive.id)}
out <- list(nDives=out.dv, Time=range(x$Time), Doubles=out.double,
Reso=difftime(x$Time[2], x$Time[1], units="sec"))
if (deparse(substitute(x)) != "x$tdr") print(out)
}
summary.statdives <- function(x, na.rm=TRUE){
}
summary.ses <- function(x, na.rm=TRUE) {
inherits(x, "ses") || stop("'x' must be of class 'ses'.")
# 	out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out.tdr <- summary(x$tdr)
print(out.tdr)
}
summary(myses$tdr)
# S3 method for summary, class ses - tdr and statdives
summary.tdr <- function(x, na.rm=TRUE){
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
cond <- where(x, is.double) & !sapply(myses$tdr, inherits, what="POSIXt")
out.double <- matrix(unlist(lapply(x[ , cond], fun.double)), nrow=length(funs))
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(cond))
attr(out.double, which="dimnames") <- list(names(funs), names(x)[cond])
if (any(grepl("Dive.id", names(x)))) {out.dv <- max(x$Dive.id)}
out <- list(nDives=out.dv, Time=range(x$Time), Doubles=out.double,
Reso=difftime(x$Time[2], x$Time[1], units="sec"))
i
summary(myses$tdr)
# S3 method for summary, class ses - tdr and statdives
summary.tdr <- function(x, na.rm=TRUE){
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
cond <- where(x, is.double) & !sapply(myses$tdr, inherits, what="POSIXt")
out.double <- matrix(unlist(lapply(x[ , cond], fun.double)), nrow=length(funs))
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(cond))
attr(out.double, which="dimnames") <- list(names(funs), names(x)[cond])
if (any(grepl("Dive.id", names(x)))) {out.dv <- max(x$Dive.id)}
out <- list(nDives=out.dv, Time=range(x$Time), Doubles=out.double,
Reso=difftime(x$Time[2], x$Time[1], units="sec"))
if (deparse(substitute(x)) != "x$tdr") print(out)
}
summary(myses$tdr)
summary(myses)
# S3 method for summary, class ses - tdr and statdives
summary.tdr <- function(x, na.rm=TRUE){
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
cond <- where(x, is.double) & !sapply(myses$tdr, inherits, what="POSIXt")
out.double <- matrix(unlist(lapply(x[ , cond], fun.double)), nrow=length(funs))
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(cond))
attr(out.double, which="dimnames") <- list(names(funs), names(x)[cond])
if (any(grepl("Dive.id", names(x)))) {out.dv <- max(x$Dive.id)}
out <- list(nDives=out.dv, Time=range(x$Time), Doubles=out.double,
Reso=difftime(x$Time[2], x$Time[1], units="sec"))
# 	if (deparse(substitute(x)) != "x$tdr") {print(out)}
return(out)
}
summary(myses)
myses$Time <- NULL
dput(myses)
summary.ses <- function(x, na.rm=TRUE) {
# 	out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out.tdr <- summary(x$tdr)
out <- list(Ind.id=x$Ind.id, out.tdr)
print(out)
}
summary(myses)
myses$Ind.id <- "2010-12"
summary(myses)
summary.ses <- function(x, na.rm=TRUE) {
# 	out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out.tdr <- summary(x$tdr)
out <-  c(list(Ind.id=x$Ind.id, out.tdr)
print(out)
}
summary.ses <- function(x, na.rm=TRUE) {
# 	out.char <- lapply(x$stat[ , where(x$stat, is.character)], table)
out.tdr <- summary(x$tdr)
out <-  c(list(Ind.id=x$Ind.id), out.tdr)
print(out)
}
summary(myses)
nrow(myses$tdr)
nrow(data.frame())
summary(myses$tdr)
dput(myses)
# S3 method for summary, class ses - tdr and statdives
summary.tdr <- function(x, na.rm=TRUE){
funs <- c(min=min, mean=mean, median=median, max=max)
fun.double <- function(x){
lapply(funs, function(f) f(x=x, na.rm=na.rm))
}
cond <- where(x, is.double) & !sapply(myses$tdr, inherits, what="POSIXt")
out.double <- matrix(unlist(lapply(x[ , cond], fun.double)), nrow=length(funs))
class(out.double) <- "table"
attr(out.double, which="dim") <- c(length(funs), sum(cond))
attr(out.double, which="dimnames") <- list(names(funs), names(x)[cond])
if (any(grepl("Dive.id", names(x)))) {out.dv <- max(x$Dive.id)}
out <- list(nDives=out.dv, Time=range(x$Time),
Reso=difftime(x$Time[2], x$Time[1], units="sec"),
Vars=out.double)
return(out)
}
summary.statdives <- function(x, na.rm=TRUE){
}
summary.ses <- function(x, na.rm=TRUE) {
out <-  list(Ind.id=x$Ind.id)
if (nrow(x$tdr) > 0){out <- c(out, summary(x$tdr))}
print(out)
}
summary(myses)
summary(myses$tdr)
load_all("../SES")
library(SES)
